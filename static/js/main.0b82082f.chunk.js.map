{"version":3,"sources":["logo.svg","svg/island.svg","Game.js","utils/planet.js","utils/star.js","utils/canvas.js","SolarSystem.js","App.js","reportWebVitals.js","index.js"],"names":["Game","Planet","context","x","y","radius","color","velocity","orbitRadius","this","startingPos","radian","moon","Math","random","beginPath","lineWidth","arc","PI","strokeStyle","stroke","closePath","fillStyle","fill","draw","cos","sin","Star","canvas","width","height","cvs","planets","window","innerWidth","innerHeight","stars","push","getPlanetForOptions","i","requestAnimationFrame","animate","clearRect","fillRect","forEach","star","planet","update","SolarSystem","canvasRef","useRef","mc","useEffect","current","getContext","MyCanvas","init","className","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAAe,I,YCAA,I,MCYAA,I,cCZMC,E,WACjB,WAAYC,EAASC,EAAGC,EAAGC,EAAQC,EAAOC,EAAUC,GAAc,oBAC9DC,KAAKP,QAAUA,EACfO,KAAKN,EAAIA,EACTM,KAAKL,EAAIA,EACTK,KAAKJ,OAASA,EACdI,KAAKH,MAAQA,EACbG,KAAKF,SAAWA,EAChBE,KAAKD,YAAcA,EACnBC,KAAKC,YAAc,CACfP,IACAC,KAEJK,KAAKE,OAAS,EAEdF,KAAKG,KAAO,CACRT,EAAGM,KAAKN,EAAIM,KAAKD,YAAcC,KAAKJ,OACpCD,IACAO,OAAQ,EACRJ,UAAWM,KAAKC,SAAW,IAAO,I,wCAI1C,WAEIL,KAAKP,QAAQa,YACbN,KAAKP,QAAQc,UAAY,EACzBP,KAAKP,QAAQe,IACTR,KAAKC,YAAYP,EACjBM,KAAKC,YAAYN,EACjBK,KAAKD,YACL,EACU,EAAVK,KAAKK,IACL,GAEJT,KAAKP,QAAQiB,YAAc,4BAC3BV,KAAKP,QAAQkB,SACbX,KAAKP,QAAQmB,YAGbZ,KAAKP,QAAQa,YACbN,KAAKP,QAAQe,IAAIR,KAAKN,EAAGM,KAAKL,EAAGK,KAAKJ,OAAQ,EAAa,EAAVQ,KAAKK,IAAQ,GAC9DT,KAAKP,QAAQoB,UAAYb,KAAKH,MAC9BG,KAAKP,QAAQqB,OACbd,KAAKP,QAAQmB,YAGTZ,KAAKF,SAAW,IAChBE,KAAKP,QAAQa,YACbN,KAAKP,QAAQe,IAAIR,KAAKG,KAAKT,EAAGM,KAAKG,KAAKR,EAAG,EAAG,EAAa,EAAVS,KAAKK,IAAQ,GAC9DT,KAAKP,QAAQoB,UAAY,OACzBb,KAAKP,QAAQqB,U,oBAIrB,WACId,KAAKe,OAGLf,KAAKE,QAAUF,KAAKF,SAEpBE,KAAKN,EAAIM,KAAKC,YAAYP,EAAIU,KAAKY,IAAIhB,KAAKE,QAAUF,KAAKD,YAE3DC,KAAKL,EAAIK,KAAKC,YAAYN,EAAIS,KAAKa,IAAIjB,KAAKE,QAAUF,KAAKD,YAE3DC,KAAKG,KAAKD,QAAUF,KAAKG,KAAKL,SAC9BE,KAAKG,KAAKT,EAAIM,KAAKN,EAAIU,KAAKY,IAAIhB,KAAKG,KAAKD,SAAWF,KAAKJ,OAAS,GACnEI,KAAKG,KAAKR,EAAIK,KAAKL,EAAIS,KAAKa,IAAIjB,KAAKG,KAAKD,SAAWF,KAAKJ,OAAS,O,KCnEtDsB,E,WACjB,WAAYzB,EAAS0B,GAAS,oBAC1BnB,KAAKP,QAASA,EACdO,KAAKmB,OAAQA,EACbnB,KAAKN,EAAIU,KAAKC,SAAWL,KAAKmB,OAAOC,MACrCpB,KAAKL,EAAIS,KAAKC,SAAWL,KAAKmB,OAAOE,OACrCrB,KAAKJ,OAAyB,EAAhBQ,KAAKC,S,wCAGvB,WACIL,KAAKP,QAAQa,YACbN,KAAKP,QAAQe,IAAIR,KAAKN,EAAGM,KAAKL,EAAGK,KAAKJ,OAAQ,EAAa,EAAVQ,KAAKK,IAAQ,GAC9DT,KAAKP,QAAQoB,UAAY,QACzBb,KAAKP,QAAQqB,W,KCXAK,E,WACjB,WAAYG,EAAK7B,GAAU,oBACvBO,KAAKsB,IAAMA,EACXtB,KAAKP,QAAUA,EACfO,KAAKuB,QAAU,GAGfvB,KAAKsB,IAAIF,MAAQI,OAAOC,WACxBzB,KAAKsB,IAAID,OAASG,OAAOE,Y,gDAE7B,c,iCAIA,SAAoB9B,EAAQE,EAAUC,EAAaF,GAC/C,OAAO,IAAIL,EACPQ,KAAKP,QACLO,KAAKsB,IAAIF,MAAQ,EACjBpB,KAAKsB,IAAID,OAAS,EAClBzB,EACAC,EACAC,EAAW,IACXC,K,kBAGR,WACIC,KAAKuB,QAAU,GACfvB,KAAK2B,MAAM,GAKX3B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,GAAI,EAAG,EAAG,WACrD7B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,EAAG,EAAG,GAAI,SACrD7B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,GAAI,EAAG,GAAI,WACtD7B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,GAAI,EAAG,IAAK,SACvD7B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,GAAI,IAAK,IAAK,QACzD7B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,GAAI,EAAG,IAAK,WACvD7B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,GAAI,KAAM,IAAK,WAC1D7B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,GAAI,EAAG,IAAK,SACvD7B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,GAAI,IAAK,IAAK,WACzD7B,KAAKuB,QAAQK,KAAK5B,KAAK6B,oBAAoB,EAAG,EAAG,IAAK,SAEtD,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IACrB9B,KAAK2B,MAAMC,KAAK,IAAIV,EAAKlB,KAAKP,QAASO,KAAKsB,Q,qBAOpD,WAAW,IAAD,OACNS,uBAAsB,kBAAM,EAAKC,aAGjChC,KAAKP,QAAQwC,UAAU,EAAG,EAAGjC,KAAKsB,IAAIF,MAAOpB,KAAKsB,IAAID,QACtDrB,KAAKP,QAAQoB,UAAY,eACzBb,KAAKP,QAAQyC,SAAS,EAAG,EAAGlC,KAAKsB,IAAIF,MAAOpB,KAAKsB,IAAID,QACrDrB,KAAK2B,MAAMQ,SAAQ,SAAAC,GACfA,EAAKrB,UAETf,KAAKuB,QAAQY,SAAQ,SAAAE,GACjBA,EAAOC,gB,KCjCJC,MA3Bf,WAEI,IAAMC,EAAYC,iBAAO,MACnBC,EAAID,iBAAO,MAkBjB,OAdAE,qBAAU,WAEN,IAAMxB,EAASqB,EAAUI,QACnBnD,EAAU0B,EAAO0B,WAAW,MAClCH,EAAGE,QAAS,IAAIE,EAAS3B,EAAQ1B,GAKjCiD,EAAGE,QAAQG,OACXL,EAAGE,QAAQZ,YAEZ,IAGC,qBAAKgB,UAAU,8BAAf,SACI,wBAAQC,IAAKT,OCZVU,MAVf,WACE,OACE,qBAAKF,UAAU,cAAf,SAGE,cAAC,EAAD,OCESG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0b82082f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/island.8cbb01bb.svg\";","import './css/game.css';\nimport island from './svg/island.svg';\nfunction Game() {\n    return (\n        <section class=\"w-full md:w-9/12 xl:w-8/12 p-96\">\n            <h1 class=\"text-3xl lg:text-5xl font-bold text-pink-500\">\n                Sachin<br />Bahukhandi\n            </h1>\n        </section>\n    );\n\n}\nexport default Game;","export default class Planet {\n    constructor(context, x, y, radius, color, velocity, orbitRadius) {\n        this.context = context;\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.color = color;\n        this.velocity = velocity;\n        this.orbitRadius = orbitRadius;\n        this.startingPos = {\n            x,\n            y\n        }\n        this.radian = 0;\n        //moon\n        this.moon = {\n            x: this.x + this.orbitRadius + this.radius,\n            y,\n            radian: 0,\n            velocity: (Math.random() + 0.1) / 30\n        };\n    }\n\n    draw() {\n        // Planet Path\n        this.context.beginPath();\n        this.context.lineWidth = 2;\n        this.context.arc(\n            this.startingPos.x,\n            this.startingPos.y,\n            this.orbitRadius,\n            0,\n            Math.PI * 2,\n            false\n        );\n        this.context.strokeStyle = 'rgba(255, 255, 255, 0.35)';\n        this.context.stroke();\n        this.context.closePath();\n\n        //Planet\n        this.context.beginPath();\n        this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n        this.context.fillStyle = this.color;\n        this.context.fill();\n        this.context.closePath();\n\n        // Moon (not sun)\n        if (this.velocity > 0) {\n            this.context.beginPath();\n            this.context.arc(this.moon.x, this.moon.y, 2, 0, Math.PI * 2, false);\n            this.context.fillStyle = 'gray';\n            this.context.fill();\n        }\n    }\n\n    update() {\n        this.draw();\n\n        // Update the x and y by the velocity\n        this.radian += this.velocity; // increase our angle every animation frame\n        // Get the new x based on our new angle and radius\n        this.x = this.startingPos.x + Math.cos(this.radian) * this.orbitRadius;\n        // Get the new y based on our new angle and radius\n        this.y = this.startingPos.y + Math.sin(this.radian) * this.orbitRadius;\n\n        this.moon.radian += this.moon.velocity;\n        this.moon.x = this.x + Math.cos(this.moon.radian) * (this.radius + 5);\n        this.moon.y = this.y + Math.sin(this.moon.radian) * (this.radius + 5);\n    }\n}\n","export default class Star {\n    constructor(context, canvas) {\n        this.context= context;\n        this.canvas= canvas;\n        this.x = Math.random() * this.canvas.width;\n        this.y = Math.random() * this.canvas.height;\n        this.radius = Math.random() * 2;\n    }\n\n    draw() {\n        this.context.beginPath();\n        this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n        this.context.fillStyle = 'white';\n        this.context.fill();\n    }\n}","import Planet from \"./planet\";\nimport Star from \"./star\";\nexport default class canvas {\n    constructor(cvs, context) {\n        this.cvs = cvs;\n        this.context = context;\n        this.planets = [];\n\n        //making the canvas full width and height\n        this.cvs.width = window.innerWidth;\n        this.cvs.height = window.innerHeight;\n    }\n    colorPlanets(){\n        \n    }\n    \n    getPlanetForOptions(radius, velocity, orbitRadius, color) {\n        return new Planet(\n            this.context,\n            this.cvs.width / 2,\n            this.cvs.height / 2,\n            radius,\n            color,\n            velocity / 1000,\n            orbitRadius\n        );\n    }\n    init() {\n        this.planets = [];\n        this.stars=[];\n\n        // for (let i = 0; i < 400; i++) {\n        //     // planets.push()\n        // }\n        this.planets.push(this.getPlanetForOptions(35, 0, 0, 'yellow')); // sun\n        this.planets.push(this.getPlanetForOptions(5, 6, 65, 'gray')); // mercury\n        this.planets.push(this.getPlanetForOptions(10, 5, 90, 'orange')); // venus\n        this.planets.push(this.getPlanetForOptions(15, 4, 125, 'blue')); // earth\n        this.planets.push(this.getPlanetForOptions(20, 3.5, 175, 'red')); // mars\n        this.planets.push(this.getPlanetForOptions(25, 3, 225, 'orange')); // jupiter\n        this.planets.push(this.getPlanetForOptions(20, 2.25, 275, 'yellow')); // saturn\n        this.planets.push(this.getPlanetForOptions(15, 2, 325, 'blue')); // uranus\n        this.planets.push(this.getPlanetForOptions(25, 1.5, 375, 'purple')); // neptune\n        this.planets.push(this.getPlanetForOptions(7, 1, 450, 'gray')); // pluto\n\n        for (let i = 0; i < 400; i++) {\n            this.stars.push(new Star(this.context, this.cvs));\n        }\n    }\n\n    // Animation Loop\n\n\n    animate() {\n        requestAnimationFrame(() => this.animate());\n\n\n        this.context.clearRect(0, 0, this.cvs.width, this.cvs.height);\n        this.context.fillStyle = 'rgb(0, 0, 0)';\n        this.context.fillRect(0, 0, this.cvs.width, this.cvs.height);\n        this.stars.forEach(star => {\n            star.draw();\n        });\n        this.planets.forEach(planet => {\n            planet.update();\n        });\n\n    }\n\n\n}","import React, { useRef, useEffect } from 'react';\nimport MyCanvas from './utils/canvas';\nimport { Canvas } from '@react-three/fiber';\n\nfunction SolarSystem() {\n\n    const canvasRef = useRef(null);\n    const mc= useRef(null);\n\n    \n\n    useEffect(() => {\n\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        mc.current= new MyCanvas(canvas, context);\n\n        let frameCount = 0\n        let animationFrameId\n\n        mc.current.init();\n        mc.current.animate();\n        \n    }, [])\n\n    return (\n        <div className=\"h-screen w-screen my-canvas\">\n            <canvas ref={canvasRef}  />\n        </div>\n    )\n}\nexport default SolarSystem;","import logo from './logo.svg';\nimport './App.css';\nimport Game from './Game';\nimport SolarSystem from './SolarSystem';\n\nfunction App() {\n  return (\n    <div className=\"px-0  h-100\">\n      \n      {/* <Game/> */}\n      <SolarSystem/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}